machine:
  install:
    disk: /dev/sda
    wipe: true
    extraKernelArgs:
      - cpufreq.default_governor=performance
  kubelet:
    extraArgs:
      rotate-server-certificates: true
    extraMounts:
      - destination: /var/local/openebs
        type: bind
        source: /var/local/openebs
        options:
          - rbind
          - rshared
          - rw
  network:
    hostname: ${hostname}
    kubespan:
      enabled: true
  sysctls:
    vm.nr_hugepages: "1024"
%{ if enable_mayastor == true ~}
  nodeLabels:
    openebs.io/engine: mayastor
%{ endif ~}
cluster:
%{ if controlplane == true ~}
  allowSchedulingOnControlPlanes: true
  apiServer:
    admissionControl:
      - name: PodSecurity
        configuration:
          apiVersion: pod-security.admission.config.k8s.io/v1beta1
          kind: PodSecurityConfiguration
          exemptions:
            namespaces:
              - openebs
%{ endif ~}
  discovery:
    enabled: true
    registries:
      kubernetes: # Kubernetes registry is problematic with KubeSpan, if the control plane endpoint is routeable itself via KubeSpan.
        disabled: true
      service: {}
  extraManifests:
    - https://raw.githubusercontent.com/alex1989hu/kubelet-serving-cert-approver/main/deploy/standalone-install.yaml
    - https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
---
apiVersion: v1alpha1
kind: NetworkDefaultActionConfig
ingress: block
---
apiVersion: v1alpha1
kind: NetworkRuleConfig
name: kubelet-ingress
portSelector:
  ports:
    - 10250
  protocol: tcp
ingress:
%{ for controlplane in controlplane_list ~}
  - subnet: ${controlplane}/32
%{ endfor ~}
%{ for worker in worker_list ~}
  - subnet: ${worker}/32
%{ endfor ~}
---
apiVersion: v1alpha1
kind: NetworkRuleConfig
name: apid-ingress
portSelector:
  ports:
    - 50000
  protocol: tcp
ingress:
%{ if controlplane == true ~}
  - subnet: 0.0.0.0/0
  - subnet: ::/0
%{ else ~}
%{ for controlplane in controlplane_list ~}
  - subnet: ${controlplane}/32
%{ endfor ~}
%{ endif ~}
%{ if controlplane == true ~}
---
apiVersion: v1alpha1
kind: NetworkRuleConfig
name: trustd-ingress
portSelector:
  ports:
    - 50001
  protocol: tcp
ingress:
%{ for controlplane in controlplane_list ~}
  - subnet: ${controlplane}/32
%{ endfor ~}
%{ for worker in worker_list ~}
  - subnet: ${worker}/32
%{ endfor ~}
---
apiVersion: v1alpha1
kind: NetworkRuleConfig
name: kubernetes-api-ingress
portSelector:
  ports:
    - 6443
  protocol: tcp
ingress:
  - subnet: 0.0.0.0/0
  - subnet: ::/0
---
apiVersion: v1alpha1
kind: NetworkRuleConfig
name: etcd-ingress
portSelector:
  ports:
    - 2379-2380
  protocol: tcp
ingress:
%{ for controlplane in controlplane_list ~}
  - subnet: ${controlplane}/32
%{ endfor ~}
%{ endif ~}
---
apiVersion: v1alpha1
kind: NetworkRuleConfig
name: cni-vxlan
portSelector:
  ports:
    - 4789
  protocol: udp
ingress:
%{ for controlplane in controlplane_list ~}
  - subnet: ${controlplane}/32
%{ endfor ~}
%{ for worker in worker_list ~}
  - subnet: ${worker}/32
%{ endfor ~}
